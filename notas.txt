
O QUE É UM COMMIT (head): "Um commit no contexto destes sistemas de controle de versão refere-se a 
submeter as últimas alterações do código fonte ao repositório e fazer com que estas alterações se 
tornem parte da versão principal (head) do repositório. Deste modo, quando outros usuários fazem um
UPDATE ou um checkout do repositório, eles receberão a versão enviada mais recentemente, a menos 
que eles especifiquem que querem recuperar uma versão anterior do código fonte no repositório."

O QUE É UM REPOSITÓRIO: é uma coleção de commits, é uma grande caixa onde fica guardado todas 
as alterações, commits, feitas.

O QUE É UM BRANCH: branch é uma divisão na linha do meu projeto, é uma segunda opção, ou terceira...
é um ponto onde meu sistema principal vai mudar e eu quero exprementar algo. Também serve para 
quando u fizer um checkou antigo e fizer uma alteração neste checkout antigo e salvar, se eu não 
criar um branch para esse novo commit deste commit antigo (que fiz pelo checkout), ele vai ficar 
perdido na linha do tempo, pois quando eu voltar para o master ele sinmplemsnete não vai aparecer. 

O QUE É REMOTE: é a pasta que crio para enviar para o GitHub por push, eu dou um nome a ela e informo
 o link no GitHub que ela vai ser armazenada também é o nome do meu reposítório no GitHub, ou outro 
 local é o meu repositório remoto, e o na minha m[áquina é o repositório local.

O QUE É UM FORK (bifurcação): 

COMANDOS PARA O  GIT
--> git config <-- --global user.email "you@example.com"
	git config --global user.name "Your Name"
	git config --global core.editor "subl -n -w" tornar o sublime editor padrão

--> git init <-- Comando para eu criar os metadados(cria um repositorio) do Git para transformar 
	aquele diretório em um repositório do Git

--> git add <-- adiciono um arquivo para ser comitado da área de transferẽncia no meu repositório

--> git status <-- Comando que mostra o status da minha página atual mostrando o que já está para 
	o repositorio e o que está em transição para ele.

--> git reset <-- retira um arquivo da área de transferência para ser comitado

--> git commit <-- cria um comit com os arquivos que eu coloquei com o git add

--> git clone <-- serve para clonar um repositório no Git, tenho que ter o link do repositório no Git

--> git log <-- serve para eu ver os commits do meu repositório, com ele posso ver o ID, o nome dos 
	commit e data e hora da alteração e saber quem fez 		a alteração.

--> git diff <-- serve para comprar os commit, no linux é um comando que também serve para comparar.
	Aparece linhas coloridas que foram apagadas e 
	colocadas.
	>git diff --staged serve para comprar os arquivos da minha área de trabalho e as da área de 
	transição do commit que eu coloquei 
	>git diff --hard serve para descartar todas as alterações no diretório de trabalho ou na área de 
	preparação	

--> git show <-- comando para comprar, como o git diff, mas esse comando comprara um commit com seu 
	commit pai, preciso colocar só um ID commit

--> git checkout (ID do commit) <-- serve para voltar versões anteriores dos meus commit para eu 
	verificar bugs, por exemplo.
	git checkout também pode ser para mudar entre os branch que eu tenho no meu projeto

--> git branch <-- serve para ver os meus branch, também para criar um branch
	git branch novo-branch
	git branch dash -d nome-branch exclui o label (rotulo) do branch, comando para usar depois de 
	criar um merge(união de dois branche) e quiser excluir um branch, ele não exclui os commit do 
	branch, apenas o rotulo deste branch

--> git log --graph --oneline nome-do-branches <-- serve para ver a linha do tempo com os dois ou 
	mais branches criados no meu projeto

--> git merge <-- git merge branche1 branche2 - comando para unir dois branches  
	git checkout -b novo-branch-nome cria e muda para um branch novo quando vou fazer um commit
	git merge --abort 

--> git remote <-- comando para criar o remote do meu repositório (ele salva numa 'gaveta' somente um
	brench) local para enviar para o repositório do GitHub
	git remote add 'nome do remoto' 'link no GitHub' cria um novo remote
	git remote -v mostra os remoto que eu criei e os links, todos no meu Git local

--> git pull <-- comando para sincronizar o BRANCH do GitHub para meu repositório local. Isso é usado 
	para quando os dois repositórios 
	estão diferentes, com commits diferentes, o git pull vai fazer um merge do commit do GitHub e do 
	commit do meu local, que teoricamente estão dierentes, então mudara o meu branch e ficará igual 
	o do GitHub. 
	>git pull 'nome do remote' 'nome do brunch'
	>pull request no GitHub(ferramenta do GitHub): crio um novo branch, commito uma mudança neste branch novo e faço push 
	para o GitHub, no GitHub, uso o pull request com outros usuários para ver se faço merge do branch 
	master como este novo que criei. Isso serve para trabalho em equipe, para ver se minha mudança vai 
	fazer parte do branche master

--> git push <-- comando para enviar o meu remote para o GitHub, = git fetch + git merge
	git push 'nome do remote' 'nome do branch' geralmente é o branch master

--> git fetch <-- comando para atualizar o REMOTE que eu fiz ao clonar, ou seja, ele vai até o GitHub
	repositório de onde fiz o clone, e vê se tem atualização, isso no caso de uma outra pessoa ter 
	feito atualização no repositório, se tiver alteração ele atualiza o meu remote local. se eu fizer
	um git log ou um git status vai me mostrar as diferenças.
	
<-------------------------------------------->

Algo importante, o Git é um sistema de versão, o GitHub é o site/webservice que eu utilizo para gurdar meus Git

1 - Como a visualização de uma diferença entre duas versões de um arquivo ajudou você a ver o erro que foi introduzido?
RESPOSTA: Comparando as linhas ajuda a dicenir a diferença entre as linhas igual e as linhas que foram alteradas.

2 - Um acesso fácil a todo o histórico de um arquivo, faria de você um Programador mais eficiente a longo prazo?
RESPOSTA: Acredito que sim, eu poderia voltar facilmente se fizer algo errado ou ver como era bem antes para compreender melhor o que está agora.

3 -Quais você acha que são os prós e contras de escolher manualmente quando criar um Commit(salvamento do estado), como você faz no Git, versus ter versões automaticamente salvas, como o Google Docs faz?
RESPOSTA: o pró de ser como google é que vocẽ não perde nada, mesmo aconteça um acidente, tipo a maquina dar pau e vc não ter salvo, acredito que a desvantagem disso é o volume de dados que cada salvamento gera, já que ele salva todo segundo. Acho que não tem nem uma vantagem do Git em ralação a salvar, o óbvio é que ele vai salvar só quando eu pedir, assim não ocupa muito espaço. Na verdade um contra da forma do google docs seria a quantidade de vezes salva, seria difísil para mim retornar a uma versão que desejo, já que seriam muuuitas verções.

4 - Por que você acha que alguns sistemas de controle de versões, como o Git, permitem salvar múltiplos Arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?
RESPOSTA: Pq quando você trabalha com o Git vc tem tendência de trabalhar com mais de um arquivo sendo editado ao mesmo tempo e no google docs é um por vez.

5 - Como você pode usar os comandos git log e git diff para ver o histórico de arquivos?
RESPOSTA: No terminal o no Dash do Git, eu acho, como como usar, em ĺinhas de código.

6 - Como o uso do controle de versão pode torná-lo mais confiante para fazer mudanças que Poderia quebrar alguma coisa?
RESPOSTA: Pq se eu fizer algo errado na versão atual eu tenho uma facilidade para retornar ao estado anterior.

7 - Agora que você configurou seu espaço de trabalho, o que você quer tentar usar o Git?
RESPOSTA: Quero fazer versões para um projeto próprio, e aprender mais e mais usar arquivos com linhas de comando.

<------------------------------------------------------------------->

Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?
Compreender melhor como era o projeto, fazer melhorias olhando o passado do projeto. Conhecimento sobre o projeto.

<---------------------------------------------->

Qual o tamanho de um commit?
Um commit, ponto de salvamento, deve ser to tamanho de um ponto lógico, quando você passar para outra lógica dentro do script é pq deve ser outro commit

<------------------------------------------------>

Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs
RESPOSTA: OS pŕos de escolher manualmente é que eu consigo uma oraganização lógica, de forma organizada conforme meu pensamento lógico, a desvantagem é que posso esquecer.

<------------------------------------------->

Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?
RESPOSTA: Acho que é pq arquivos de programação podem ter relação com outros arquivos, assim, quando faço um commit de uma alteração, fica claro a separação que naquele commit foi corrigido algo, mesmo se essa correção envolveu mais de um arquivo.

<------------------------------------------->

De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?
RESPOSTA: Com o controle de versão posso mudar alguma coisa e ter certeza de que se tiver errado posso facilmente voltar a versão anterior

<------------------------------------------->

Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?
RESPOSTA: Usar para estudos e gerenciar um projeto próprio também para aprender mais sobre o Git

<------------------------------------------->


